using CRMonopoly.domein;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace CRMonopolyTest
{
    
    
    /// <summary>
    ///This is a test class for WorpenTest and is intended
    ///to contain all WorpenTest Unit Tests
    ///</summary>
    [TestClass()]
    public class WorpenTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Is3XDubbelGegooit
        ///</summary>
        [TestMethod()]
        public void Is3XDubbelGegooitTest()
        {
            Worpen worpen = new Worpen();
            Assert.IsFalse(worpen.Is3XDubbelGegooit());
            worpen.Add(new Worp() { Gedobbeldeworp1 = 1, Gedobbeldeworp2 = 2 });
            worpen.Add(new Worp() { Gedobbeldeworp1 = 3, Gedobbeldeworp2 = 3 });
            worpen.Add(new Worp() { Gedobbeldeworp1 = 4, Gedobbeldeworp2 = 4 });
            Assert.IsFalse(worpen.Is3XDubbelGegooit());
            worpen.Add(new Worp() { Gedobbeldeworp1 = 5, Gedobbeldeworp2 = 5 });
        }

        /// <summary>
        ///A test for LaatsteWorp
        ///</summary>
        [TestMethod()]
        public void LaatsteWorpTest()
        {
            Worpen worpen = new Worpen();
            worpen.Add(new Worp() { Gedobbeldeworp1 = 1, Gedobbeldeworp2 = 2 });
            Worp laasteWorp = new Worp() { Gedobbeldeworp1 = 3, Gedobbeldeworp2 = 4 };
            worpen.Add(laasteWorp);
            Assert.AreSame(laasteWorp, worpen.LaatsteWorp());
        }

    }
}
